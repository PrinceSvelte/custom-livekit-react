{"code":"import { ConnectionState } from 'livekit-client';\r\nimport { useEffect } from 'react';\r\nimport { StageView } from './components/StageView';\r\nimport { useRoom } from '@livekit/react-core';\r\nexport const LiveKitRoom = ({ url, token, roomOptions, connectOptions, stageRenderer, participantRenderer, controlRenderer, onConnected, onLeave, }) => {\r\n    const roomState = useRoom(roomOptions);\r\n    useEffect(() => {\r\n        if (roomState.room) {\r\n            roomState.connect(url, token, connectOptions).then((room) => {\r\n                if (!room) {\r\n                    return;\r\n                }\r\n                if (onConnected && room.state === ConnectionState.Connected) {\r\n                    onConnected(room);\r\n                }\r\n            });\r\n        }\r\n        return () => {\r\n            if (roomState.room?.state !== ConnectionState.Disconnected) {\r\n                roomState.room?.disconnect();\r\n            }\r\n        };\r\n    }, [roomState.room]);\r\n    const selectedStageRenderer = stageRenderer ?? StageView;\r\n    return selectedStageRenderer({\r\n        roomState,\r\n        participantRenderer,\r\n        controlRenderer,\r\n        onLeave,\r\n    });\r\n};\r\n//# sourceMappingURL=LiveKitRoom.js.map","references":["/Users/princerajput/custom-livekit/@livekit/react-components/node_modules/livekit-client/dist/src/index.d.ts","/Users/princerajput/custom-livekit/@livekit/react-components/node_modules/@types/react/ts5.0/index.d.ts","/Users/princerajput/custom-livekit/@livekit/react-components/src/components/ControlsView.tsx","/Users/princerajput/custom-livekit/@livekit/react-components/src/components/ParticipantView.tsx","/Users/princerajput/custom-livekit/@livekit/react-components/src/components/StageProps.ts","/Users/princerajput/custom-livekit/@livekit/react-components/src/components/StageView.tsx","/Users/princerajput/custom-livekit/@livekit/react-components/node_modules/@livekit/react-core/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"LiveKitRoom.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/LiveKitRoom.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAyC,eAAe,EAAE,MAAM,gBAAgB,CAAC;AACxF,OAAc,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAIzC,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAgB9C,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,EAC1B,GAAG,EACH,KAAK,EACL,WAAW,EACX,cAAc,EACd,aAAa,EACb,mBAAmB,EACnB,eAAe,EACf,WAAW,EACX,OAAO,GACG,EAAE,EAAE;IACd,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;IAEvC,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,SAAS,CAAC,IAAI,EAAE;YAClB,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC1D,IAAI,CAAC,IAAI,EAAE;oBACT,OAAO;iBACR;gBACD,IAAI,WAAW,IAAI,IAAI,CAAC,KAAK,KAAK,eAAe,CAAC,SAAS,EAAE;oBAC3D,WAAW,CAAC,IAAI,CAAC,CAAC;iBACnB;YACH,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,GAAG,EAAE;YACV,IAAI,SAAS,CAAC,IAAI,EAAE,KAAK,KAAK,eAAe,CAAC,YAAY,EAAE;gBAC1D,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC;aAC9B;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAErB,MAAM,qBAAqB,GAAG,aAAa,IAAI,SAAS,CAAC;IAEzD,OAAO,qBAAqB,CAAC;QAC3B,SAAS;QACT,mBAAmB;QACnB,eAAe;QACf,OAAO;KACR,CAAC,CAAC;AACL,CAAC,CAAC\"}","dts":{"name":"/Users/princerajput/custom-livekit/@livekit/react-components/LiveKitRoom.d.ts","writeByteOrderMark":false,"text":"import { Room, RoomOptions, RoomConnectOptions } from 'livekit-client';\r\nimport React from 'react';\r\nimport { ControlsProps } from './components/ControlsView';\r\nimport { ParticipantProps } from './components/ParticipantView';\r\nimport { StageProps } from './components/StageProps';\r\nexport interface RoomProps {\r\n    url: string;\r\n    token: string;\r\n    roomOptions?: RoomOptions;\r\n    connectOptions?: RoomConnectOptions;\r\n    onConnected?: (room: Room) => void;\r\n    onLeave?: (room: Room) => void;\r\n    stageRenderer?: (props: StageProps) => React.ReactElement | null;\r\n    participantRenderer?: (props: ParticipantProps) => React.ReactElement | null;\r\n    controlRenderer?: (props: ControlsProps) => React.ReactElement | null;\r\n}\r\nexport declare const LiveKitRoom: ({ url, token, roomOptions, connectOptions, stageRenderer, participantRenderer, controlRenderer, onConnected, onLeave, }: RoomProps) => React.JSX.Element | null;\r\n"}}
