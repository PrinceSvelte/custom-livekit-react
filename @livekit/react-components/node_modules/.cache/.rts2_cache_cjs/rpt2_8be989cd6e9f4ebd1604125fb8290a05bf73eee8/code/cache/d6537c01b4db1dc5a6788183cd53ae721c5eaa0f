{"code":"import { LocalParticipant } from 'livekit-client';\r\n/**\r\n * Default sort for participants, it'll order participants by:\r\n * 1. dominant speaker (speaker with the loudest audio level)\r\n * 2. local participant\r\n * 3. other speakers that are recently active\r\n * 4. participants with video on\r\n * 5. by joinedAt\r\n */\r\nexport function defaultSortParticipants(participants) {\r\n    const sortedParticipants = [...participants];\r\n    sortedParticipants.sort((a, b) => {\r\n        // loudest speaker first\r\n        if (a.isSpeaking && b.isSpeaking) {\r\n            return b.audioLevel - a.audioLevel;\r\n        }\r\n        // speaker goes first\r\n        if (a.isSpeaking !== b.isSpeaking) {\r\n            if (a.isSpeaking) {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        }\r\n        // last active speaker first\r\n        if (a.lastSpokeAt !== b.lastSpokeAt) {\r\n            const aLast = a.lastSpokeAt?.getTime() ?? 0;\r\n            const bLast = b.lastSpokeAt?.getTime() ?? 0;\r\n            return bLast - aLast;\r\n        }\r\n        // video on\r\n        const aVideo = a.videoTracks.size > 0;\r\n        const bVideo = b.videoTracks.size > 0;\r\n        if (aVideo !== bVideo) {\r\n            if (aVideo) {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        }\r\n        // joinedAt\r\n        return (a.joinedAt?.getTime() ?? 0) - (b.joinedAt?.getTime() ?? 0);\r\n    });\r\n    const localParticipant = sortedParticipants.find((p) => p instanceof LocalParticipant);\r\n    if (localParticipant) {\r\n        const localIdx = sortedParticipants.indexOf(localParticipant);\r\n        if (localIdx >= 0) {\r\n            sortedParticipants.splice(localIdx, 1);\r\n            if (sortedParticipants.length > 0) {\r\n                sortedParticipants.splice(1, 0, localParticipant);\r\n            }\r\n            else {\r\n                sortedParticipants.push(localParticipant);\r\n            }\r\n        }\r\n    }\r\n    return sortedParticipants;\r\n}\r\n//# sourceMappingURL=StageUtils.js.map","references":["/Users/princerajput/custom-livekit/@livekit/react-components/node_modules/livekit-client/dist/src/index.d.ts"],"map":"{\"version\":3,\"file\":\"StageUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/components/StageUtils.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,gBAAgB,EAAe,MAAM,gBAAgB,CAAC;AAE/D;;;;;;;GAOG;AACH,MAAM,UAAU,uBAAuB,CAAC,YAA2B;IACjE,MAAM,kBAAkB,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC;IAC7C,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QAC/B,wBAAwB;QACxB,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,UAAU,EAAE;YAChC,OAAO,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;SACpC;QAED,qBAAqB;QACrB,IAAI,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,UAAU,EAAE;YACjC,IAAI,CAAC,CAAC,UAAU,EAAE;gBAChB,OAAO,CAAC,CAAC,CAAC;aACX;iBAAM;gBACL,OAAO,CAAC,CAAC;aACV;SACF;QAED,4BAA4B;QAC5B,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW,EAAE;YACnC,MAAM,KAAK,GAAG,CAAC,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC5C,MAAM,KAAK,GAAG,CAAC,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC5C,OAAO,KAAK,GAAG,KAAK,CAAC;SACtB;QAED,WAAW;QACX,MAAM,MAAM,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;QACtC,IAAI,MAAM,KAAK,MAAM,EAAE;YACrB,IAAI,MAAM,EAAE;gBACV,OAAO,CAAC,CAAC,CAAC;aACX;iBAAM;gBACL,OAAO,CAAC,CAAC;aACV;SACF;QAED,WAAW;QACX,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IACH,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,YAAY,gBAAgB,CAAC,CAAC;IACvF,IAAI,gBAAgB,EAAE;QACpB,MAAM,QAAQ,GAAG,kBAAkB,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC9D,IAAI,QAAQ,IAAI,CAAC,EAAE;YACjB,kBAAkB,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACvC,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,kBAAkB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;aACnD;iBAAM;gBACL,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aAC3C;SACF;KACF;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC\"}","dts":{"name":"/Users/princerajput/custom-livekit/@livekit/react-components/components/StageUtils.d.ts","writeByteOrderMark":false,"text":"import { Participant } from 'livekit-client';\r\n/**\r\n * Default sort for participants, it'll order participants by:\r\n * 1. dominant speaker (speaker with the loudest audio level)\r\n * 2. local participant\r\n * 3. other speakers that are recently active\r\n * 4. participants with video on\r\n * 5. by joinedAt\r\n */\r\nexport declare function defaultSortParticipants(participants: Participant[]): Participant[];\r\n"}}
